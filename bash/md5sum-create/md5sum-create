#!/bin/bash
#===============================================================================
#
#         FILE: md5sum-create
#
#        USAGE: ./md5sum-create
#
#  DESCRIPTION: ---
#
#      OPTIONS: ---
# REQUIREMENTS: ---
#         BUGS: ---
#        NOTES: ---
#  ORIG AUTHOR: Samuel Gabrielsson <samuel.gabrielsson@gmail.com>
# ORGANIZATION: ---
#      VERSION: 1.0
#      CREATED: 2019-12-13 18:36:59
#     REVISION: ---
#      CHANGES: ---
#
#===============================================================================
# Exit when any command fails
set -euo pipefail

# Enable several extended pattern matching operators
shopt -s extglob

# Get the directory and program name of this script
dir=$(dirname $(realpath "${0}")); if [ ! -d "$dir" ]; then dir="$PWD"; fi
prog=$(basename "${0}")

# Source standard library files
. "$dir/lib/generic.sh"
. "$dir/lib/exit-status.sh"

# Source program specific library file
. "$dir/lib/md5sum-create.sh"

# Global variable
max_depth=2

#===============================================================================
# Return the depth of foder based on how many "/" are in the string
#
# Usage:
# depth <dir>       Calculate the depth
#===============================================================================
depth()
{
    if [[ ! -d $1 ]]; then
        print_msg -fail "Not a directory: ${1}"
    fi

    local depth="${1//[^\/]}"
    dir_depth="${#depth}"
}

#===============================================================================
# A function to remove chars from directory name:
#
# Usage:
# rename_dir <directory>    Remove unwatend characters from directory name
#===============================================================================
rename_dir()
{
    if [[ ! -d $1 ]]; then
        print_msg -fail "Not a directory: ${1}"
    fi

    # Save full path
    local full_path="${1}"

    # Get directory name foo from foodir/bardir/foo/
    local dirname="${1%/*}"

    # If $1 is a directory, then this will return bardir from foodir/bardir/
    # If $1 is a file, then this will return foo.mkv from foodir/bardir/foo.mkv
    local basename="${1##*/}"

    # Rename the folder Featurettes to Extras and exit
    if [[ -d $full_path ]]; then
        depth "${full_path}"    # This will set the current dir_depth variable
    fi
    if [[ -d $full_path && $dir_depth == $max_depth
            && $full_path == "${dirname}/Featurettes" ]]; then
        mv "${full_path}" "${dirname}/Extras"
        print_msg -ok "Renamed '${full_path}' -> '${dirname}/Extras'"
        return
    fi

    # Remove all illegal characters like parantheses, apostrophes and more
    local illegal="[()\'!,\[\]\#]"
    basename="${basename//${illegal}/}"

    # Video format regexp year 1888-2099
    local year='(188[89]|189[0-9]|19[0-9]{2}|20[0-9]{2}|2100)'
    # Video resolution regexp 720p, 1080p or 2160p
    local resolution='(720p|1080p|2160p)'

    # Remove the string Criterion between year and resolution
    local criterion="(${year} Criterion ${resolution})"
    if [[ $basename =~ $criterion ]]; then
        basename="${basename/Criterion[[:space:]]/}"
    fi

    # Video coding format
    local video='[[:space:]]HEVC[[:space:]]'

    # Color depth
    local color='10bit[[:space:]]'

    # High Dynamic Range (Matches zero or one occurrence)
    local hdr='?(HDR[[:space:]])'

    # Audio coding standard
    local audio='AAC[[:space:]]'

    # Surround sound numbers (Match one of the given patterns)
    local surround='@(1.0|2.0|5.1|7.1)'

    # Remove the full pattern
    local pattern="${video}${color}${hdr}${audio}${surround}"
    basename="${basename/${pattern}/}"

    # Should we remove language? (Matches zero or one occurrence)
    #local language='?(Russian |Spanish | Chinese)'

    # Release group (For example Tigole). Get the last word in the string.
    # Note! Maybe not a good idea to match the last word? Hard code instead?
    local group='([A-Za-z0-9_]+)$'
    #local group='(Tigole)$'
    if [[ $basename =~ $group ]]; then
        basename="${basename/ ${BASH_REMATCH[1]}/-${BASH_REMATCH[1]}}"
    fi

    # Replace all ":" or "-" with "-"
    local colon='([[:space:]]*[:-][[:space:]]*)'
    if [[ $basename =~ $colon ]]; then
        basename="${basename//${BASH_REMATCH[1]}/-}"
    fi

    # Replace all "q&a" with "q.and.a"
    basename="${basename//q\&a/q.and.a}"

    # Replace all "&" with "and"
    basename="${basename//\&/and}"

    # Replace all " " with "."
    local dots='([[:space:]]+)'
    if [[ $basename =~ $dots ]]; then
        basename="${basename//${BASH_REMATCH[1]}/.}"
    fi

    # Replace all or " .. " with "."
    local dots='([[:space:]]*[\.]+[[:space:]]*)'
    if [[ $basename =~ $dots ]]; then
        basename="${basename//${BASH_REMATCH[1]}/.}"
    fi

    # Convert only files to lowercase
    if [[ -f ${full_path} ]]; then
        # Convert to lowercase only if basename is a file
        basename="${basename,,}"
    fi

    # Rename folder or file
    if [[ $full_path == $dirname/$basename ]]; then
        print_msg -skip "Already renamed: ${full_path}"
        return
    else
        mv "${full_path}" "${dirname}/${basename}"
        print_msg -ok "Renamed '${full_path}' -> '${dirname}/${basename}'"
    fi
}

#===============================================================================
# A function to rename files to subfolder name.
#
# Take the subfolder as basename and rename the media file to basename.extension
#
# Usage:
# rename_file <directory>  Rename media files in directory
#===============================================================================
rename_file()
{
    if [[ ! -f $1 ]]; then
        print_msg -fail "Not a file: ${1}"
    fi

    # Save full path
    local full_path="${1}"

    # Get directory name foo from foodir/bardir/foo/
    local dirname="${1%/*}"

    # If $1 is a directory, then this will return bardir from foodir/bardir/
    # If $1 is a file, then this will return foo.mkv from foodir/bardir/foo.mkv
    local basename="${1##*/}"

    # Get filename extension
    local extension="${1##*.}"

    # Get the new name from the parent folder or subfolder name, i.e
    # Test/Mo.Better.Blues.1990.1080p.BluRay.x265-Tigole -> Mo.Better.Blues.1990.1080p.BluRay.x265-Tigole
    local subfolder="${dirname##*/}"

    # Add the subfolder name and extension together and create then new basename
    basename="${subfolder}.${extension}"

    # Convert to lowercase
    basename="${basename,,}"

    # Rename folder or file
    if [[ $full_path == $dirname/$basename ]]; then
        print_msg -skip "Already renamed: ${full_path}"
        return
    else
        mv "${full_path}" "${dirname}/${basename}"
        print_msg -ok "Renamed '${full_path}' -> '${dirname}/${basename}'"
    fi
}

#===============================================================================
# A function to rename files in Extras/ subfolder.
#
# Usage:
# rename_extras <file>  Rename media files in directory
#===============================================================================
rename_extras()
{
    if [[ ! -f $1 ]]; then
        print_msg -fail "Not a file: ${1}"
    fi

    # Save full path
    local full_path="${1}"

    # Get directory name foo from foodir/bardir/foo/
    local dirname="${1%/*}"

    # If $1 is a directory, then this will return bardir from foodir/bardir/
    # If $1 is a file, then this will return foo.mkv from foodir/bardir/foo.mkv
    local basename="${1##*/}"

    # Get the new name from the parent folder or subfolder name, i.e
    # Test/foo/Extras/bar.mkv -> Extras
    local subfolder="${dirname##*/}"

    # Check if we are in Extras folder or not
    if [[ ${subfolder} != "Extras" ]]; then
        print_msg -skip "Not in Extras folder: ${full_path}"
        return
    fi

    # Remove all illegal characters like parantheses, apostrophes and more
    local illegal="[()\'!,\[\]\#]"
    basename="${basename//${illegal}/}"

    # Replace all ":" or "-" with "-"
    local colon='([[:space:]]*[:-][[:space:]]*)'
    if [[ $basename =~ $colon ]]; then
        basename="${basename//${BASH_REMATCH[1]}/-}"
    fi

    # Replace all "q&a" with "q.and.a"
    local qanda='[Qq]&[Aa]'
    basename="${basename//${qanda}/q.and.a}"

    # Replace all "&" with "and"
    basename="${basename//\&/and}"

    # Replace all " " with "."
    local dots='([[:space:]]+)'
    if [[ $basename =~ $dots ]]; then
        basename="${basename//${BASH_REMATCH[1]}/.}"
    fi

    # Replace all or " .. " with "."
    local dots='([[:space:]]*[\.]+[[:space:]]*)'
    if [[ $basename =~ $dots ]]; then
        basename="${basename//${BASH_REMATCH[1]}/.}"
    fi

    # Convert only files to lowercase
    if [[ -f ${full_path} ]]; then
        # Convert to lowercase only if basename is a file
        basename="${basename,,}"
    fi

    # Rename folder or file
    if [[ $full_path == $dirname/$basename ]]; then
        print_msg -skip "Already renamed: ${full_path}"
        return
    else
        mv "${full_path}" "${dirname}/${basename}"
        print_msg -ok "Renamed '${full_path}' -> '${dirname}/${basename}'"
    fi
}

#===============================================================================
# Get md5sum name format:
# <TITLE>.<YEAR>.<RESOLUTION>.<SOURCE>.<CODEC>-<GROUP>
# For example:
# movies/
# movies/Monte.Carlo.2011.1080p.BluRay.x264-RARBG
# 1408.2007.1080p.BluRay.x265-xxxpav69
#===============================================================================
check_movie_format()
{
    local dir_path="${1}"
    local dir_name="$(basename ${1})"

    # Video format regexp year 1888-2099
    local year_regexp='(188[89]|189[0-9]|19[0-9]{2}|20[0-9]{2}|2100)'

    # Video resolution regexp 720p, 1080p or 2160p
    local resolution_regexp='(720p|1080p|2160p)'

    # Video source regexp BluRay, WEB-DL or WEBRip
    local source_regexp='(BluRay|WEB-DL|WEBRip)'

    # Video codec regexp x264 or x265
    local source_regexp='(x264|x265)'

    # Check <YEAR>
    if [[ "${dir_name})" =~ ${year_regexp} ]]; then
        #printf '%s\n' "${BASH_REMATCH[@]}"
        print_msg -ok "Found match \"${BASH_REMATCH[1]}\" in: ${dir_name}"
    else
        print_msg -skip "Not a valid year in movie name: ${dir_name}"
    fi

    # Check <RESOLUTION>
    if [[ "${dir_name})" =~ ${resolution_regexp} ]]; then
        #printf '%s\n' "${BASH_REMATCH[@]}"
        print_msg -ok "Found match \"${BASH_REMATCH[1]}\" in: ${dir_name}"
    else
        print_msg -skip "Not a valid resolution in movie name: ${dir_name}"
    fi

    # Check if length of string is zero
    if [[ -z "${dir_path// }" ]]; then
        print_msg -fail "\$dir_path empty string"
    fi

    # Check that GROUP name is last
    group_regexp="-[0-9aA-zZ]$"
    #print_msg -warn "My warn"

    #echo "foo=${dir_path}"
}

#===============================================================================
# MAIN
#===============================================================================
# Parse all the args and set the args_rest (directory)
parse_args "${@}"

# If the variable is set from command line, then print usage message and exit
if [ ! -z ${help_+x} ]; then
    print_usage; exit 0
fi

# Check if args_rest is empty. If it is then use current directory as default
# directory.
if [ -z "${path}" ]; then
    print_msg -info "Path option is required!"
    print_usage; exit 0
fi

# Check if given path exists
if [ ! -e "${path}" ]; then
    print_msg -fail "Path does not exist: ${path}"
fi

# Print the program ASCII name
print_prog_name

# Search through all the directories recursively under root and one level down.
# i.e root - level 1, and one sub-directory - level 2
OIFS="$IFS"; IFS=$'\n'
for file in $(find "${path}" -depth -mindepth 1 -maxdepth $max_depth -type d); do
    rename_dir "${file}"
done
IFS="$OIFS"

# Rename media files by using the subfolders name as base and add the file
# extension to the end.
OIFS="$IFS"; IFS=$'\n'
for file in $(find "${path}" -depth -mindepth 1 -maxdepth $max_depth -type f); do
    rename_file "${file}"
done
IFS="$OIFS"

# Rename files in Extras/ directory
OIFS="$IFS"; IFS=$'\n'
for file in $(find "${path}" -depth -mindepth $((max_depth + 1)) -maxdepth $((max_depth + 1)) -type f); do
    rename_extras "${file}"
done
IFS="$OIFS"

# Create md5sum files
exit
OIFS="$IFS"
IFS=$'\n'
for file in $(find "${path}" -type d); do
    # Enter into the path
    if [ -d "${file}" ]; then
        # $file is a directory
        pushd "${file}"

        # Check if directory name is in movie format
        check_movie_format "${file}"
        popd
    fi
done
IFS="$OIFS"

# Print a nice summary and return with appropriate exit status
handle_exit
